Exercice 5 :

Rédefinir une méthode signifie que, dans

une sous-classe d'une méthode existante dans une

La classe parente est réécrite pour changer son comportement.


Exercice 6 :

Dans Scooter, les méthodes redéfinies sont :

1) getPuissance(double FrequenceCoupsDePedale) : cette méthode redéfinit la méthode getPuissance de Velo.

2) toString() : Cette méthode redéfinit la méthode toString de Velo pour fournir

une description spécifique de l'objet Scooter.


Exercice 7 :

L'annotation @Override indique que la méthode qui la précède redéfinit une méthode d'une classe parente.


Exercice 8 :

L'annotation @Override est pertinente car elle permet au compilateur de vérifier que la méthode redéfinie correspond

à une méthode de la classe parente, et cela permet d'éviter des erreur lier a un mauvais nom de méthode

ou encore des paramètres incorrects.

Si on s'en dispense, le code fonctionne toujours, mais on perd cette vérification et en cas d'erreur

il sera difficile de la détecter lors de la compilation.



Exercice 9 :

Voici les méthodes où il serait pertinent de mettre @Override :
Classe Velo :

@Override

public String toString() {

    return "Velo [braquet=" + braquet + ", diamRoue=" + diamRoue + "]";

}

@Override

public double getPuissance(double FrequenceCoupsDePedale) {

        return FrequenceCoupsDePedale braquet  diamRoue * genAlea.nextDouble();

}

Classe Scooter :

@Override

public double getPuissance(double FrequenceCoupsDePedale) {

    return super.getPuissance(FrequenceCoupsDePedale) * facteurPuissanceMoteur;
}


Exercice 10 :

L'appel super.getPuissance(FrequenceCoupsDePedale) permet d'appeler la méthode getPuissance() de la

classe parente Velo depuis la classe dérivée Scooter.

